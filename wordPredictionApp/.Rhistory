rm(list=ls())
ngrams <<- vector("list", 5)
grams <<- vector("list", 5)
grams[1] <<- readRDS("unigrams.rds")
grams[[1]] <<- readRDS("unigrams.rds")
grams[[1]] = readRDS("unigrams.rds")
grams <<- vector("list", 5)
grams[[1]] = readRDS("unigrams.rds")
5:1
debugSource("test.R")
test()
grams[[1]] <- readRDS("unigrams.rds")
rm(list=ls())
debugSource("test.R")
test()
debugSource("test.R")
test()
grams[[1]] <<- readRDS("unigrams.rds")
?gglobalenv
?globalenv
globalenv()
rm(list=ls())
grams <<- vector("list", 5)
grams[[1]] <<- readRDS("unigrams.rds")
rm(list=ls())
debugSource("test.R")
test()
length(grams)
rm(list=ls())
debugSource("test.R")
test()
error
P[i]
data.frame(Pred=P, Ans=A)
loginfo(paste("Pred vs Ans:",print(compare)))
compare = data.frame(Pred=P, Ans=A)
loginfo(paste("Pred vs Ans:",print(compare)))
print(compare)
debugSource("test2.R")
debugSource("test2.R")
test2()
debugSource("test2.R")
test2()
debugSource("test.R")
test()
shiny::runApp()
library(logging)
loglevels()
loglevels
as.charater(3)
as.character(3)
source("test.R")
rm(list=ls())
source("test.R")
test()
rm(list=ls())
source("test.R")
test()
alpha=1
alpha*=.4
?readLines
rm(list=ls())
source("test.R")
test()
rm(list=ls())
debugSource("test.R")
test()
length(txt)
length(valPhrases)
length(valPhrases)
names(compare[[1]])
names(compare[[1]])
?transmute
head(compare[[1]])
rm(list=ls())
debugSource("test.R")
test()
error
length(compare[[i]]$Ans)
compare[[i]][1:10,]$Pred!=compare[[i]][1:10,]$Ans
compare[[i]][,length(Ans!=Pred)]
names(compare)
head(compare)
head(compare[[1]])
tmp=compare[[1]]
tmp[,length(Ans!=Pred)]
tmp[Ans!=Pred, .N]
tmp[,Ans]
names(tmp)
tmp[,Pred]
class(tmp)
tmp = data.table(tmp)
tmp[,Ans]
tmp[Ans!=Pred, .N]
tmp[Ans==Pred, .N]
nrow(tmp)
rm(list=ls())
debugSource("test.R")
test()
rm(list=ls())
debugSource("test.R")
debugSource("test.R")
debugSource("test.R")
test()
error
setwd("../../dsci-benchmark")
source("benchmark.R")
rm(list=ls())
source("benchmark.R")
rm(list=ls())
source("benchmark.R")
rm(list=ls())
source("benchmark.R")
system("pwd")
rm(list=ls())
source("benchmark.R")
system('ls /home/mgioi_000/git/wordpredictionproject/data/unigrams.rds)
)
''
'
system('ls /home/mgioi_000/git/wordpredictionproject/data/unigrams.rds')
system('ls /home/mgioi_000/git/wordpredictionproject/data')
system('ls /home/mgioi_000/git/wordpredictionproject')
system('ls /home/mgioi_000/git')
system('pwd')
system("bash -c 'ls /home/mgioi_000/git/wordpredictionproject'")
system("bash -c 'pwd'")
system("bash -c 'ls /c/home/mgioi_000/git/wordpredictionproject'")
system("bash -c 'ls /cygdrive/c/home/mgioi_000/git/wordpredictionproject'")
rm(list=ls())
source("benchmark.R")
getwd()
system("bash -c 'ls ../wordpredictionproject/data'")
system("bash -c 'ls ../wordpredictionproject/wordPredictionApp'")
rm(list=ls())
source("benchmark.R")
system("bash -c 'ls ../wordpredictionproject/wordPredictionApp/unigrams.rds'")
system("bash -c 'ls ../wordpredictionproject/wordPredictionApp'")
system("bash -c 'ls ../wordpredictionproject/wordPredictionApp'")
system("bash -c 'ls ../wordpredictionproject/wordPredictionApp/unigrams.rds'")
rm(list=ls())
source("benchmark.R")
warnings()
rm(list=ls())
source("benchmark.R")
rm(list=ls())
source("benchmark.R")
head(grams[[1]], n=50)
grams[[1]][pword=="flip-flop"]
grams[[1]][pword=="flip-flops"]
grams[[1]][pword=="flip-flopped"]
txt="The smart brown fox jumped over the lazy dog"
tokenize(txt, removeNumbers=FALSE, removePunct=FALSE, removeSeparators=FALSE)
library(quanteda)
tokenize(txt, removeNumbers=FALSE, removePunct=FALSE, removeSeparators=FALSE)
txt="The smart brown fox jumped over the flip-flopper"
tokenize(txt, removeNumbers=FALSE, removePunct=FALSE, removeSeparators=FALSE)
tokenize(txt, removeNumbers=FALSE, removePunct=FALSE, removeSeparators=TRUE)
tokenize(txt, what="fastestword",removeNumbers=FALSE, removePunct=FALSE, removeSeparators=TRUE)
tokenize(txt, what="fasterword",removeNumbers=FALSE, removePunct=FALSE, removeSeparators=TRUE)
tokenize(txt, what="fasterword", removeSeparators=TRUE)
txt="The smart brown fox jump'd over the flip-flopper"
tokenize(txt, what="fasterword", removeSeparators=TRUE)
getwd()
setwd("../wordpredictionproject/wordPredictionApp")
debugSource("train.R")
train()
debugSource("train.R")
train()
t1=proc.time(); tokenize(txtSet, n=1, concatenator = " "); print(proc.time()[3]-t1)
t1=proc.time(); tokenize(txtSet, n=1, concatenator = " "); print(proc.time()[3]-t1[3])
t1=proc.time(); tokenize(txtSet, n=1, concatenator = " "); print(proc.time()[3]-t1[3])
t1=proc.time(); tmp=tokenize(txtSet, n=2, concatenator = " "); print(proc.time()[3]-t1[3])
t1=proc.time(); tmp=tokenize(txtSet, n=1:2, concatenator = " "); print(proc.time()[3]-t1[3])
t1=proc.time(); tmp=tokenize(txtSet, what="fasterword",n=1:2, concatenator = " "); print(proc.time()[3]-t1[3])
t1=proc.time(); tmp=tokenize(txtSet, what="fastestword",n=1:2, concatenator = " "); print(proc.time()[3]-t1[3])
head(tmp)
rm(list=ls())
source("train.R")
train()
rm(list=ls())
source("train.R")
train()
rm(list=ls())
source("train.R")
train()
debugSource("train.R")
train()
head(unigrams, 50)
head(unigrams, 100)
head(unigrams, 50)
nrow(unigrams)
unigrams[30000:300050,]
print(unigrams[30000:300050,])
print(unigrams[300000:300050,])
print(unigrams[303000:303050,])
print(unigrams[303400:303450,])
print(unigrams[303500:303550,])
print(unigrams[304500:304550,])
nrow(unigrams)
print(unigrams[303600:303650,])
print(unigrams[303700:303750,])
print(unigrams[303750:303800,])
print(unigrams[303800:303855,])
tail(unigrams)
head(unigrams)
unigrams = unigrams[order(ngrams)]
unigrams = unigrams[order(ngram)]
names(unigrams)
unigrams = unigrams[order(pword)]
head(unigrams)
print(unigrams[1:100,])
print(unigrams[1000:1100,])
source("train.R")
train()
shiny::runApp()
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
options(shiny.error=browser)
shiny::runApp()
getwd()
setwd("../../dsci-benchmark/")
source("benchmark.R")
setwd("../wordpredictionproject/wordPredictionApp")
debugSource("train.R")
train()
head(count1)
tail(count1)
class(count1)
which(is.na(count1))
which(is.nan(count1))
which(is.nan(count12))
which(is.na(count12))
debugSource("train.R")
train()
which(is.nan(count1))
which(is.na(count1))
nrow(unigrams)
length(which(!is.na(count1)))
length(which(is.na(count1)))
debugSource("train.R")
train()
length(!is.na(count1))
length(is.na(count1))
length(!is.na(count1))
length(coutn1)
length(count1)
length(which(!is.na(count1))
)
length(which(is.na(count1)))
nnrow(bigrams)
nrow(bigrams)
nrow(count1)
length(count1)
which(is.na(bigrams$prob))
debugSource("train.R")
train()
nrow(bigrams)
nrow(bigrams)
bigrams =bigrams[complete.cases(bigrams)]
nrow(bigrams)
bigrams[complete.cases(bigrams)]
nrow(bigrams)
bigrams =bigrams[complete.cases(bigrams)]
nrow(bigrams)
debugSource("train.R")
train()
unigrams[ngram=="~"]
unigrams[ngram=="'"]
unigrams[ngram=="''"]
unigrams[ngram=="~~"]
unigrams[ngram=="'''"]
head(unigrams)
head(unigrams)
tail(unigrams)
tail(unigrams,100)
source("train.R")
train()
setwd("../../dsci-benchmark/")
source("benchmark.R")
shiny::runApp('C:/cygwin64/home/mgioi_000/git/wordpredictionproject/wordPredictionApp')
shiny::runApp('C:/cygwin64/home/mgioi_000/git/wordpredictionproject/wordPredictionApp')
shiny::runApp('C:/cygwin64/home/mgioi_000/git/wordpredictionproject/wordPredictionApp')
setwd("../wordpredictionproject/wordPredictionApp")
rm(list=ls())
debugSource("quiz1.R")
quiz1()
debugSource("quiz1.R")
quiz1()
temp
debugSource("quiz1.R")
rm(list=ls())
debugSource("quiz1.R")
quiz1()
debugSource("quiz1.R")
quiz1()
compare
compare
error
debugSource("quiz1.R")
quiz1()
debugSource("quiz1.R")
quiz1()
debugSource("quiz1.R")
quiz1()
debugSource("quiz1.R")
quiz1()
debugSource("quiz2.R")
quiz2()
shiny::runApp()
rm(list=ls())
shiny::runApp()
debugSource("train.R")
train()
rm(list=ls())
setwd("../../dsci-benchmark/")
source("benchmark.R")
source("benchmark.R")
setwd("../../dsci-benchmark/")
source("benchmark.R")
setwd("../wordpredictionproject/wordPredictionApp")
source("train.R")
rm(list=ls())
source("train.R")
train()
setwd("../../dsci-benchmark/")
source("benchmark.R")
setwd("../wordpredictionproject/wordPredictionApp")
rm(list=ls())
source("train.R")
train()
setwd("../../dsci-benchmark/")
source("benchmark.R")
source("benchmark.R")
setwd("../wordpredictionproject/wordPredictionApp")
rm(list=ls())
source("quiz1.R")
source("quiz1.R")
source("quiz1.R")
rm(list=ls())
source("quiz1.R")
quiz1()
source("quiz2.R")
quiz2()
source("train.R")
train()
rm(list=ls())
source("quiz1.R")
quiz1()
source("quiz2.R")
quiz2()
rm(list=ls())
source("quiz1.R")
source("quiz2.R")
quiz1()
source("quiz1.R")
quiz1()
debugSource("quiz1.R")
quiz1()
debugSource("quiz1.R")
quiz1()
uWords
matches
matches
paste(tokens[1:(i-1)], collapse=" ")
i
names(grams[[i]])
matches
matches
matches
all_matches
uWords
uWords
matches
all_matches
matches
i
matches
all_matches
matches
all_matches
dource("quiz1.R")
source("quiz1.R")
quiz1()
rm(list=ls())
rm(list=ls())
source("quiz1.R")
quiz1()
source("quiz1.R")
quiz1()
source("quiz2.R")
quiz2()
setwd("../../dsci-benchmark")
source("benchmark.R")
source("benchmark.R")
source("benchmark.R")
setwd("../wordpredictionproject/wordPredictionApp")
rm(list=ls())
source("train.R")
train()
source("quiz1.R")
quiz1()
source("quiz2.R")
quiz2()
setwd("../../dsci-benchmark")
source("benchmark.R")
source("benchmark.R")
?setnames
setwd("../wordpredictionproject/wordPredictionApp")
source("train.R")
train()
source("train.R")
train()
source("quiz1")
source("quiz1.R")
quiz1()
source("quiz2.R")
quiz2()
rm(list=ls())
shiny::runApp()
shiny::runApp()
debugSource("predict2.R")
predict2("dsdsfs")
predict2("dsdsfs")
source("utils.R")
grams <- loadGrams()
grams <- loadGrams()
predict2("dsdsfs")
predict2("dsdsfs")
tokens
names(grams[[1]])
names(grams[[i]])
source("quiz1.R")
quiz1()
predict2("dsdsfs", grams)
matches
all_matches
source("predict2.R")
predict2("dsdsfs", grams)
source("predict2.R")
predict2("dsdsfs", grams)
predict2("", grams)
shiny::runApp()
shiny::runApp()
### When there is a match, how to determine best match. Instead of freq, need
shiny::runApp()
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
debugSource("predict2.R")
predict2()
grams = loadGrams()
predict2("all you need is", grams)
matches
matches
shiny::runApp()
biCoca = fread("../data/COCA/w2_.txt")
head(biCoca)
setnames(biCoca, c("freq","preword","pword"))
head(biCoca)
head(bigrams)
?setnames
shiny::runApp()
debugSource("train.R")
train()
thesegrams[pword %in% c("'")]
thesegrams[pword %in% c("'")]
thesegrams[pword %in% c("fuck")]
thesegrams[pword %in% c("fucking")]
thesegrams[pword %in% c("shit")]
thesegrams[pword %in% c("crap")]
thesegrams[pword %in% c("whore")]
thesegrams[pword %in% c("pussy")]
thesegrams[pword %in% c("bastard")]
thesegrams[pword %in% c("bitch")]
swearWords = as.vector(fread("../data/swearWords.txt"))
swearWords = as.vector(fread("../data/swearWords.csv"))
swearWords
swearWords = readLines("../data/swearWords.csv")
swearWords = readLines("../data/swearWords.csv")
swearWords
?readLines
?read.csv
swearWords = read.csv("../data/swearWords.csv", header=FALSE)
swearWords
swearWords = as.vector(fread("../data/swearWords.txt"))
swearWords = read.csv("../data/swearWords.csv", header=FALSE)
swearWords = as.vector(swearWords)
swearWords
t(swearWords)
as.vector(t(swearWords))
swearWords = as.vector(t(read.csv("../data/swearWords.csv", header=FALSE)))
swearWords
debugSource("train.R")
train()
thesegrams[pword %in% c("crap")]
source("train.R")
train()
shiny::runApp()
rm(list=ls())
shiny::runApp()
shiny::runApp()
* We set $\lambda = 0.2$
